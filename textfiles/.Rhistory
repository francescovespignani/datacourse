?open
?image
?png
library(raster)
library('raster')
install.package('raster')
install.packages('raster')
library(raster)
im = raster()
im
im = raster(nrow=100, ncol=50)
im
values(im)
im
values(im) <- rnorm(5000, mean = 100)
plot)im)
plot(im)
plotRBG(im)
plotRGB(im)
plot.xy(im)
image(im)
im
res(im)
res(im)[2] <- 7.2
image(im)
im
val(im)
values(im)  <- runif(1250)
image(im)
extend(im)
extent(im)
extent(im)[1]
extent(im)[4]
extent(im)[4] = 120
image(im)
?writeRaster
writePNG
library('png')
install.packages('png')
library('png')
writePNG(im, file='hallo.png')
writePNG(im, filename='hallo.png')
?writePNG
writePNG(im, target ='hallo.png')
install.packages('eegkit')
eegcap(type="2d")
library(eegkit)
eegcap(type="2d")
data(eegcoord)
mycols <- rep("white",87)
enames <- rownames(eegcoord)
mycols[enames=="A1"] <- "green"
mycols[enames=="A2"] <- "light blue"
mycols[enames=="NZ"] <- "pink"
eegcap(type="2d",col.point=mycols)
myelectrodes <- c("FP1","FP2","FPZ","F7","F3","FZ",
"F4","F8","T7","C3","CZ","C4","T8",
"P7","P3","PZ","P4","P8","O1","O2")
eegcap(myelectrodes,"2d")
eegcapdense(type="2d")
eegcapdense("10-20","2d",plotlabels=FALSE)
data(eegcoord)
enames <- rownames(eegcoord)
# plot3d(eegcoord[,1],eegcoord[,2],eegcoord[,3],size=10,col="green")
# text3d(eegcoord[,1],eegcoord[,2],eegcoord[,3],texts=enames,col="blue")
plot(eegcoord[,4],eegcoord[,5],cex=2,col="green",pch=19)
text(eegcoord[,4],eegcoord[,5],labels=enames,col="blue")
# data(eeghead)
# shade3d(eeghead)
# data(eeghead)
shade3d(eeghead)
data(eeghead)
# data(eeghead)
shade3d(eeghead)
shade3d(eeghead)
data(eegmesh)
wire3d(eegmesh)
shade3d(eegmesh)
# get time point 65 (approx 250 ms) of "c" subjects in "eegdata" data
data(eegdata)
idx <- which(eegdata$time==65L & eegdata$group=="c")
eegdata <- eegdata[idx,]
# remove ears, nose, and reference (Cz)
idx <- c(which(eegdata$channel=="X"),which(eegdata$channel=="Y"),
which(eegdata$channel=="nd"),which(eegdata$channel=="Cz"))
eegdata <- eegdata[-idx,]
# match to eeg coordinates
data(eegcoord)
cidx <- match(eegdata$channel,rownames(eegcoord))
# spatial smoothing
eegmod <- eegsmooth(eegdata$voltage,space=eegcoord[cidx,1:3])
# use dense cap for prediction
mycap <- levels(factor(eegdata$channel))
ix <- eegcapdense(mycap,type="2d",index=TRUE)
data(eegdense)
space <- eegdense[ix,1:3]
yhat <- predict(eegmod,newdata=space)
# plot results using eegspace
#eegspace(space,yhat)
eegspace(eegdense[ix,4:5],yhat)
# get time point 65 (approx 250 ms) from "eegdata" data
data(eegdata)
idx <- which(eegdata$time==65L)
eegdata <- eegdata[idx,]
# get average spatial map
eegmean <- tapply(eegdata$voltage,list(eegdata$channel,eegdata$group),mean)
# remove ears and nose
acnames <- rownames(eegmean)
idx <- c(which(acnames=="X"),which(acnames=="Y"),which(acnames=="nd"),which(acnames=="Cz"))
eegmean <- eegmean[-idx,]
# match to eeg coordinates
data(eegcoord)
cidx <- match(rownames(eegmean),rownames(eegcoord))
open3d()
open3d()
eegspace(eegcoord[cidx,1:3],eegmean[,2])
178*60+5900
178*60+5900-13300
5900+8000
60*166-8000
plot(cars)
tmp
setwd("E:/storage_doc/textfiles")
rm('p')
rm(list=ls())
ls()
a = 1
ls()
a
Lines = readLines('astudy/S001.txt')
head(Lines)
Lines[1]
Lines[10]
a = 'ciao\nciao'
a
cat(a)
str(Lines)
cLines = gsub('\"','',Lines)
head(cLines)
splitLines = strsplit(cLines,'\t')
head(splitLines)
str(splitLines)
head(splitLines)
str(splitLines)
as.data.frame(splitLines)
t(as.data.frame(splitLines))
sjdata = read.table('astudy/S001.txt')
head(sjdata)
tail(sjdata)
good = sjdata[2:101,]
head(good)
plot(good$V2~good$V1)
str(good)
good$V2 = as.numeric(good$V2)
head(good)
good$V2 = as.numeric(as.character(good$V2))
good$V2 = as.numeric(good$V2)
head(good)
good$V2 = as.numeric(as.character(good$V2))
head(good)
good = sjdata[2:101,]
good$V2 = as.numeric(as.character(good$V2))
head(good)
str(good)
plot(good$V2~good$V1)
?read.table
good2 = read.table('astudy/S001.txt', header=T, as.is =T)
head(good2)
str(good2)
plot(good2$rt~good2$item)
good2 = read.table('astudy/S001.txt', header=T, as.is =T)
good2$item = factor(good2$item)
plot(good2$rt~good2$item)
sj1 = read.table('astudy/S001.txt', header=T, as.is =T)
sj2 = read.table('astudy/S002.txt', header=T, as.is =T)
sj3 = read.table('astudy/S003.txt', header=T, as.is =T)
sj4 = read.table('astudy/S004.txt', header=T, as.is =T)
sj5 = read.table('astudy/S005.txt', header=T, as.is =T)
all = rbind(sj1, sj2,sj3,sj4,sj5)
head(all)
dim(all)
all2 = all[order(all$item),]
head(all2)
sj1 = read.table('astudy/S001.txt', header=T, as.is =T)
sj1$subject = 'S001'
head(sj1)
sj1 = read.table('astudy/S001.txt', header=T, as.is =T)
sj1$subject = rep('S001',100)
head(sj1)
sj1$trial = 1:dim(sj1)[1]
head(sj1)
sj1$trial = 1:100
head(sj1)
dim(sj1)
dim(sj1)[1]
a = dim(sj1)
str(a)
a[1]
sjs = 1:18
sj = sjs[1]
sjs = c(3:4,18:22)
sjs
sjs[1]
paste('astudy/S','00',as.character(sj),'.txt')
?paste
paste('astudy/S','00',as.character(sj),'.txt', sep ='')
sj = 18
paste('astudy/S','00',as.character(sj),'.txt', sep ='')
?sprintf
sprintf('S%03d',1)
sprintf('S%3d',1)
sj = 18
noun = sprintf('S%03d',sj)
sj = 18
noun = sprintf('S%03d',sj)
tmp = read.table(paste('astudy/',noun,'.txt', sep=''), header=T, as.is =T)
tmp$subject = noun
tmp$trial = 1:dim(sj1)[1]
out = data.frame()
for (sj in sjs){
noun = sprintf('S%03d',sj)
tmp = read.table(paste('astudy/',noun,'.txt', sep=''), header=T, as.is =T)
tmp$subject = noun
tmp$trial = 1:dim(sjs)[1]
out = rbind(out, tmp)
}
sj
rm(list=ls())
sjs =1:18
out = data.frame()
for (sj in sjs){
noun = sprintf('S%03d',sj)
tmp = read.table(paste('astudy/',noun,'.txt', sep=''), header=T, as.is =T)
tmp$subject = noun
tmp$trial = 1:dim(sjs)[1]
out = rbind(out, tmp)
}
#  the loop solution
rm(list=ls())
sjs =1:18
out = data.frame()
for (sj in sjs){
noun = sprintf('S%03d',sj)
tmp = read.table(paste('astudy/',noun,'.txt', sep=''), header=T, as.is =T)
tmp$subject = noun
tmp$trial = 1:dim(tmp)[1]
out = rbind(out, tmp)
}
head(out)
dim(out)
str(out)
out$item = factor(out$item)
out$subject = factor(out$subject)
plot(out$subject,out$rt)
plot(out$item,out$rt)
readSj <- function(i) {
noun = sprintf('S%03d',i)
tmp = read.table(paste('astudy/',noun,'.txt', sep=''), header=T, as.is =T)
tmp$subject = noun
tmp$trial = 1:dim(tmp)[1]
return(tmp)
}
View(readSj)
rm(list=ls())
source('readFile.R')
sj = 10
noun = sprintf('S%03d',sj)
tmp = read.table(paste('astudy/',noun,'.txt', sep=''), header=T, as.is =T)
tmp$subject = noun
tmp$trial = 1:dim(tmp)[1]
dim(tmp)
table(tmp$item)
dim(tmp)[1]==100
table(tmp$item) == 10
numOk = (dim(tmp)[1]==100)
numOk
if (!(numOk)) {
warning (sprintf('Subject %d has a wrong number of items',sj))
}
numOk=F
if (!(numOk)) {
warning (sprintf('Subject %d has a wrong number of items',sj))
}
table(out$sj)
readSj <- function(i) {
noun = sprintf('S%03d',i)
tmp = read.table(paste('astudy/',noun,'.txt', sep=''), header=T, as.is =T)
tmp$subject = noun
tmp$trial = 1:dim(tmp)[1]
return(tmp)
}
out = data.frame()
for (sj in sjs){
asubj = readSj(sj)
out = rbind(out, asubj)
}
out$item = factor(out$item)
out$subject = factor(out$subject)
table(out$subject)
head(out)
readSj <- function(i) {
noun = sprintf('S%03d',i)
tmp = read.table(paste('astudy/',noun,'.txt', sep=''), header=T, as.is =T)
tmp$subject = noun
tmp$trial = 1:dim(tmp)[1]
return(tmp)
}
sjs = 1:18
out = data.frame()
for (sj in sjs){
asubj = readSj(sj)
out = rbind(out, asubj)
}
out$item = factor(out$item)
out$subject = factor(out$subject)
table(out$subject)
sj = 7
noun = sprintf('S%03d',sj)
tmp = read.table(paste('astudy/',noun,'.txt', sep=''), header=T, as.is =T)
tmp$subject = noun
tmp$trial = 1:dim(tmp)[1]
dim(tmp)
table(tmp$item)
#  can I make the user to know that something wrong is happening here?
dim(tmp)[1]==100
table(tmp$item) == 10
#  I can assign these boolean values to variables
numOk = (dim(tmp)[1]==100)
if (!(numOk)) {
warning (sprintf('Subject %d has a wrong number of items',sj))
}
if (!(numOk)) {
warning (sprintf('Subject %d has %d items instead of 100',sj,dim(tmp)[1]))
}
itemsOk = all(table(tmp$item)==10)
itemsOk
table(tmp$item)==10
if (!(itemsOk)) {
warning (sprintf('Subject %d has not 10 trial for each item',sj,dim(tmp)[1]))
}
if (!(itemsOk & numOk)) {
warning (sprintf('Something wrong with subject %d, please check',sj,dim(tmp)[1]))
}
rm(list=ls())
readSj <- function(i) {
noun = sprintf('S%03d',sj)
tmp = read.table(paste('astudy/',noun,'.txt', sep=''), header=T, as.is =T)
tmp$subject = noun
tmp$trial = 1:dim(tmp)[1]
numOk = dim(tmp)[1]==100
itemsOk = all(table(tmp$item)==10)
if (!(itemsOk & numOk)) {
warning (sprintf('Something wrong with subject %d, please check',sj,dim(tmp)[1]))
}
return(tmp)
}
sjs = 1:18
out = data.frame()
for (sj in sjs){
asubj = readSj(sj)
out = rbind(out, asubj)
}
out$item = factor(out$item)
out$subject = factor(out$subject)
rtData = out
save(rtData, file='rtData.Rdata')
write.table(rtData, file='rtData.txt', row.names=F, quote=F)
write.csv(rtData, file='rtData.csv', row.names=F, quote=F)
for (i in 1:18) { sprintf('S%03d',i)}
for (i in 1:18) { cat(sprintf('S%03d',i))}
for (i in 1:18) {
a = sprintf('S%03d',i)
}
for (i in 1:18) { sprintf('S%03d',i)}
for (i in 1:18) {
a = sprintf('S%03d',i)
}
a
for (i in 1:18) {
a = sprintf('S%03d',i)
a
}
for (i in 1:18) {
a = sprintf('S%03d',i)
print(a)
}
a
out = c()
out
c(out,'aaa')
c(out,'aaa')
out = c(out,'aaa')
out
out = c(out,'aaa')
out
out = c(out,'aaa')
out = c()
for (i in 1:18) {
a = sprintf('S%03d',i)
#print(a)
out = c(out,a)
}
out
dim(out)[1]
dim(out)
dim(rtData)
dim(rtData)[1]
a = dim(rtData)
a
rm(list=ls())
load('rtData.Rdata')
head(rtData)
str(rtData)
#  alternatively
rm(list=ls())
rtData = read.table('rtData.txt')
head(rtData)
rtData = read.table('rtData.txt', header=T)
head(rtData)
str(rtData)
rtData$item = factor(rtData$factor)
rtData$item = factor(rtData$item)
paste('w', rtData$item, sep='')
rtData$item = factor(paste('w', rtData$item, sep=''))
write.table(rtData, file = 'rtData.txt', row.names=F, quote=F)
rtData = read.table('rtData.txt', header=T)
head(rtData)
str(rtData)
tinfo = read.table('astudy/items.txt')
tinfo
tinfo = read.table('astudy/items.txt', header=T)
str(tinfo)
?merge
rm(list=ls())
rtData = read.table('rtData.txt', header=T)
tinfo = read.table('astudy/items.txt', header=T)
all = merge(rtData,tinfo)
all
all = merge(rtData,tinfo,all.x =T)
head(all)
colnames(rtData)
colnames(tinfo)
tinfo = read.table('astudy/items.txt', header=T)
tinfo$item = paste('w', tinfo$item, sep='')
all = merge(rtData,tinfo)
head(all)
dim(rtData)[1]
dim(all)[1]
colnames(tinfo)
colnames(tinfo)[1] ='gliitem'
all = merge(rtData,tinfo)
head(all)
dim(rtData)[1]
dim(all)[1]
dim(rtData)[1] == dim(all)[1]
tinfo = read.table('astudy/items.txt', header=T)
tinfo$item = paste('w', tinfo$item, sep='')
all = merge(rtData,tinfo)
head(all)
dim(rtData)[1] == dim(all)[1]
#  suppose we had different column names
colnames(tinfo)
colnames(tinfo)[1] ='gliitem'
all = merge(rtData,tinfo, all.x=T)
head(all)
dim(rtData)[1]
dim(all)[1]
all = merge(rtData,tinfo, by.x='item', by.y='gliitem')
dim(rtData)[1]
dim(all)[1]
summary(all)
table(all$type, all$string)
rm(list=ls())
rtData = read.table('rtData.txt', header=T)
tinfo = read.table('astudy/items.txt', header=T)
tinfo$item = paste('w', tinfo$item, sep='')
all = merge(rtData,tinfo)
levels(all$string)
idx = which(levels(all$string)=='scimmina')
idx
levels(all$string)[id] = 'scimmia'
levels(all$string)[idx] = 'scimmia'
sinfo = read.table('astudy/subjectInfo.csv', header=T)
sinfo = read.table('astudy/subjectInfo.csv', header=T, sep=',')
head(sinfo)
sinfo = read.csv('astudy/subjectInfo.csv', header=T, sep=',', fileEncoding = 'utf8')
sinfo
sinfo$subject.ID
num = as.numeric(gsub('^[::sog::]*','',sinfo$subject.ID))
num
sinfo$subject = sprintf('S%03d', num)
sinfo
# check
table(sinfo$subject, sinfo$subject.ID)
head(sinfo)
sinfo2 = subset(sinfo, select=c(-subject.ID, -note))
head(sinfo2)
colnames(sinfo2)[2] = 'mean_simpleRT'
head(sinfo)
head(sinfo2)
all2 = merge(all, sinfo2)
dim(all)
dim(all2)
all2 = merge(all, sinfo2, all.x=T)
dim(all)
dim(all2)
summary(all2)
head(all2)
all2 = all2[order(all2$subject, all2$trial),]
head(all2)
nchar(all2$string)
nchar(as.character(all2$string))
